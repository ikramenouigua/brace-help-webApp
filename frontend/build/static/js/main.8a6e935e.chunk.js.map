{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstrike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","fetch","then","response","json","data","setState","e","target","value","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8a6e935e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n      this.state = {\r\n        todoList:[],\r\n        activeItem:{\r\n          id:null, \r\n          title:'',\r\n          completed:false,\r\n        },\r\n        editing:false,\r\n      }\r\n      this.fetchTasks = this.fetchTasks.bind(this)\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.handleSubmit = this.handleSubmit.bind(this)\r\n      this.getCookie = this.getCookie.bind(this)\r\n\r\n\r\n      this.startEdit = this.startEdit.bind(this)\r\n      this.deleteItem = this.deleteItem.bind(this)\r\n      this.strikeUnstrike = this.strikeUnstrike.bind(this)\r\n  };\r\n\r\n  getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\n  componentWillMount(){\r\n    this.fetchTasks()\r\n  }\r\n\r\n  fetchTasks(){\r\n    console.log('Fetching...')\r\n\r\n    fetch('http://127.0.0.1:8000/api/task-list/')\r\n    .then(response => response.json())\r\n    .then(data => \r\n      this.setState({\r\n        todoList:data\r\n      })\r\n      )\r\n  }\r\n\r\n  handleChange(e){\r\n    var name = e.target.name\r\n    var value = e.target.value\r\n    console.log('Name:', name)\r\n    console.log('Value:', value)\r\n\r\n    this.setState({\r\n      activeItem:{\r\n        ...this.state.activeItem,\r\n        title:value\r\n      }\r\n    })\r\n  }\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault()\r\n    console.log('ITEM:', this.state.activeItem)\r\n\r\n    var csrftoken = this.getCookie('csrftoken')\r\n\r\n    var url = 'http://127.0.0.1:8000/api/task-create/'\r\n\r\n    if(this.state.editing == true){\r\n      url = `http://127.0.0.1:8000/api/task-update/${ this.state.activeItem.id}/`\r\n      this.setState({\r\n        editing:false\r\n      })\r\n    }\r\n\r\n\r\n\r\n    fetch(url, {\r\n      method:'POST',\r\n      headers:{\r\n        'Content-type':'application/json',\r\n        'X-CSRFToken':csrftoken,\r\n      },\r\n      body:JSON.stringify(this.state.activeItem)\r\n    }).then((response)  => {\r\n        this.fetchTasks()\r\n        this.setState({\r\n           activeItem:{\r\n          id:null, \r\n          title:'',\r\n          completed:false,\r\n        }\r\n        })\r\n    }).catch(function(error){\r\n      console.log('ERROR:', error)\r\n    })\r\n\r\n  }\r\n\r\n  startEdit(task){\r\n    this.setState({\r\n      activeItem:task,\r\n      editing:true,\r\n    })\r\n  }\r\n\r\n\r\n  deleteItem(task){\r\n    var csrftoken = this.getCookie('csrftoken')\r\n\r\n    fetch(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\r\n      method:'DELETE',\r\n      headers:{\r\n        'Content-type':'application/json',\r\n        'X-CSRFToken':csrftoken,\r\n      },\r\n    }).then((response) =>{\r\n\r\n      this.fetchTasks()\r\n    })\r\n  }\r\n\r\n\r\n  strikeUnstrike(task){\r\n\r\n    task.completed = !task.completed\r\n    var csrftoken = this.getCookie('csrftoken')\r\n    var url = `http://127.0.0.1:8000/api/task-update/${task.id}/`\r\n\r\n      fetch(url, {\r\n        method:'POST',\r\n        headers:{\r\n          'Content-type':'application/json',\r\n          'X-CSRFToken':csrftoken,\r\n        },\r\n        body:JSON.stringify({'completed': task.completed, 'title':task.title})\r\n      }).then(() => {\r\n        this.fetchTasks()\r\n      })\r\n\r\n    console.log('TASK:', task.completed)\r\n  }\r\n\r\n\r\n  render(){\r\n    var tasks = this.state.todoList\r\n    var self = this\r\n    return(\r\n        <div className=\"container\">\r\n\r\n          <div id=\"task-container\">\r\n              <div  id=\"form-wrapper\">\r\n                 <form onSubmit={this.handleSubmit}  id=\"form\">\r\n                    <div className=\"flex-wrapper\">\r\n                        <div style={{flex: 6}}>\r\n                            <input onChange={this.handleChange} className=\"form-control\" id=\"title\" value={this.state.activeItem.title} type=\"text\" name=\"title\" placeholder=\"Add task..\" />\r\n                         </div>\r\n\r\n                         <div style={{flex: 1}}>\r\n                            <input id=\"submit\" className=\"btn btn-warning\" type=\"submit\" name=\"Add\" />\r\n                          </div>\r\n                      </div>\r\n                </form>\r\n             \r\n              </div>\r\n\r\n              <div  id=\"list-wrapper\">         \r\n                    {tasks.map(function(task, index){\r\n                      return(\r\n                          <div key={index} className=\"task-wrapper flex-wrapper\">\r\n\r\n                            <div onClick={() => self.strikeUnstrike(task)} style={{flex:7}}>\r\n\r\n                                {task.completed == false ? (\r\n                                    <span>{task.title}</span>\r\n\r\n                                  ) : (\r\n\r\n                                    <strike>{task.title}</strike>\r\n                                  )}\r\n  \r\n                            </div>\r\n\r\n                            <div style={{flex:1}}>\r\n                                <button onClick={() => self.startEdit(task)} className=\"btn btn-sm btn-outline-info\">Edit</button>\r\n                            </div>\r\n\r\n                            <div style={{flex:1}}>\r\n                                <button onClick={() => self.deleteItem(task)} className=\"btn btn-sm btn-outline-dark delete\">-</button>\r\n                            </div>\r\n\r\n                          </div>\r\n                        )\r\n                    })}\r\n              </div>\r\n          </div>\r\n          \r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}